#message(STATUS "Embedding shaders")

set(HEADER_PATH ${CMAKE_ARGV3})
set(SOURCE_PATH ${CMAKE_ARGV4})

set(SHADER_FILES "")
math(EXPR ARG_COUNT "${CMAKE_ARGC} - 1")  # Get total argument count
foreach(INDEX RANGE 5 ${ARG_COUNT})
    set(ARG "${CMAKE_ARGV${INDEX}}")

    # Only keep arguments that end with .glsl (or other valid shader extensions)
    if(ARG MATCHES "\\.(glsl|vert|frag|comp|geom|tesc|tese)$")
        list(APPEND SHADER_FILES "${ARG}")
    endif()
endforeach()

# Start writing to the header and source files
set(SHADER_HDR_STR "#pragma once\n\n//\n// This file is generated by CMake. Edit the .glsl files instead.\n//\n\n")
set(SHADER_SRC_STR "#include \"embedded_shaders.h\"\n\n//\n// This file is generated by CMake. Edit the .glsl files instead.\n//\n\n")

# Loop through all shader files
foreach(TEXT_FILE ${SHADER_FILES})
    get_filename_component(FILE_NAME ${TEXT_FILE} NAME_WE) # Extract file name without extension
    string(REGEX REPLACE "[^a-zA-Z0-9_]" "_" VAR_NAME "${FILE_NAME}_glsl") # Ensure valid C identifier

    # Read the content of the shader file
    file(READ ${CMAKE_CURRENT_LIST_DIR}/${TEXT_FILE} CONTENTS)

    # Write extern declaration in the header file
	set(SHADER_HDR_STR "${SHADER_HDR_STR}extern const char* ${VAR_NAME};\n")
	
	set(SHADER_SRC_STR "${SHADER_SRC_STR}const char* ${VAR_NAME} = R\"(${CONTENTS}\n)\";\n\n")
endforeach()

# Read the existing contents of the file if it exists
# Only write if the new content is different
if(EXISTS ${HEADER_PATH})
	file(READ ${HEADER_PATH} CURRENT_HDR_CONTENT)
else()
	set(CURRENT_HDR_CONTENT "")
endif()
if(NOT "${CURRENT_HDR_CONTENT}" STREQUAL "${SHADER_HDR_STR}")
	#message(STATUS "DIFFERENT\nOLD:\n${CURRENT_HDR_CONTENT}\nNEW:\n${SHADER_HDR_STR}")
	string(REPLACE ";" "\\;" SHADER_HDR_STR "${SHADER_HDR_STR}")
	file(WRITE ${HEADER_PATH} ${SHADER_HDR_STR})
endif()

if(EXISTS ${SOURCE_PATH})
	file(READ ${SOURCE_PATH} CURRENT_SRC_CONTENT)
else()
	set(CURRENT_SRC_CONTENT "")
endif()
if(NOT "${CURRENT_SRC_CONTENT}" STREQUAL "${SHADER_SRC_STR}")
	string(REPLACE ";" "\\;" SHADER_SRC_STR "${SHADER_SRC_STR}")
	file(WRITE ${SOURCE_PATH} ${SHADER_SRC_STR})
endif()